Table users {
  id int [pk, increment]
  username text [unique, not null]
  password_hash text [not null]
  created_at timestamp
}

Table servers {
  id int [pk, increment]
  name text [not null]
  owner_id int [not null]
}
Ref: servers.owner_id > users.id [delete: cascade]

Table memberships {
  user_id int
  server_id int
  join_at timestamp [default: `now()`]
  primary key (user_id, server_id)
}
Ref: memberships.user_id > users.id [delete: cascade]
Ref: memberships.server_id > servers.id [delete: cascade]

Table friends {
  requester_id int
  receiver_id int
  status text [note: 'pending, accepted, blocked']
}
Ref: friends.requester_id > users.id [delete: cascade]
Ref: friends.receiver_id > users.id [delete: cascade]

Table voice_channels {
  id int [pk, increment]
  server_id int
  name text [not null]
}
Ref: voice_channels.server_id > servers.id [delete: cascade]

Table text_channels {
  id int [pk, increment]
  server_id int [not null]
  name text [not null]
  created_at timestamp
  topic text [note: "Optional channel description or topic"]
}
Ref: text_channels.server_id > servers.id [delete: cascade]

Table messages {
  id int [pk, increment]
  channel_id int [not null]
  sender_id int [not null]
  content text [not null]
  sent_at timestamp [not null, default: `now()`]
  edited_at timestamp
  type text [note: "Optional: text, image, file, system"]
}
Ref: messages.channel_id > text_channels.id [delete: cascade]
Ref: messages.sender_id > users.id [delete: cascade]

Table voice_sessions {
  user_id int
  channel_id int
  connected_at timestamp
  primary key (user_id)
}
Ref: voice_sessions.user_id > users.id [delete: cascade]
Ref: voice_sessions.channel_id > voice_channels.id [delete: cascade]

Table roles {
  id int [pk, increment]
  server_id int
  name text [not null]  // "default", "admin", etc.
}
Ref: roles.server_id > servers.id [delete: cascade]

Table user_roles {
  user_id int
  role_id int
  primary key (user_id, role_id)
}
Ref: user_roles.user_id > users.id [delete: cascade]
Ref: user_roles.role_id > roles.id [delete: cascade]

Table channel_permissions {
  channel_id int [not null]
  channel_type text [not null, note: "text or voice"]
  role_id int
  can_join boolean [note: "only for Voice"]
  can_read boolean [note: "only for Text"]
  can_write boolean [note: "only for Text"]
  can_manage boolean
  primary key (channel_id, channel_type, role_id)
}
Ref: channel_permissions.role_id > roles.id [delete: cascade]

Table dm_conversations {
  id int [pk, increment]
  user_a_id int
  user_b_id int
  created_at timestamp
  indexes {
    (user_a_id, user_b_id) [unique]
  }
}
Ref: dm_conversations.user_a_id > users.id [delete: cascade]
Ref: dm_conversations.user_b_id > users.id [delete: cascade]


Table dm_messages {
  id int [pk, increment]
  conversation_id int
  sender_id int
  content text [not null]
  sent_at timestamp [default: `now()`]
  edited_at timestamp
  type text [note: "e.g. 'text', 'image', 'file'"]
}
Ref: dm_messages.sender_id > users.id [delete: cascade]
Ref: dm_messages.conversation_id > dm_conversations.id [delete: cascade]

Table server_files {
  id int [pk, increment]
  server_id int
  uploader_id int
  filename text [not null]
  filepath text [not null]
  mime_type text
  size_bytes bigint [not null, note: "Enforce 250 MB max in code"]
  uploaded_at timestamp [default: `now()`]
  is_deleted boolean [default: false]
}
Ref: server_files.server_id > servers.id [delete: cascade]
Ref: server_files.uploader_id > users.id [delete: cascade]


Table file_logs {
  id int [pk, increment]
  file_id int
  user_id int
  action text [not null, note: "e.g. 'upload', 'delete', 'modify'"]
  action_at timestamp [default: `now()`]
  note text [note: "Optional: reason, metadata, etc."]
}
Ref: file_logs.file_id > server_files.id [delete: cascade]
Ref: file_logs.user_id > users.id [delete: cascade]
